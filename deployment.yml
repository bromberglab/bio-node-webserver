apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-nginx-conf
data:
  nginx.conf: |-
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        sendfile        on;
        keepalive_timeout  65;

        upstream django {
            server 127.0.0.1:8080;
        }

        server {
            listen 80;

            client_max_body_size 50M;

            if ($http_x_forwarded_proto = http) {
                return 301 https://$host$request_uri;
            }

            location /app {
                alias   /var/www/dist;
                index  index.html index.htm;
            }
            location / {
                proxy_set_header       X-Forwarded-Proto $http_x_forwarded_proto;
                proxy_set_header       Host $host;
                proxy_set_header       X-Real-IP $http_x_forwarded_for;

                proxy_pass         http://django;
                proxy_redirect     off;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
  labels:
    app: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      volumes:
        - name: html
          emptyDir: {}
        - name: docker-volume
          hostPath:
            # directory location on host
            path: /var/run/docker.sock
        - name: nginx-proxy-config
          configMap:
            name: proxy-nginx-conf
        - name: ceph
          persistentVolumeClaim:
            claimName: cephfs-pvc
            readOnly: false
      terminationGracePeriodSeconds: 5
      containers:
        - name: django
          image: gcr.io/poised-cortex-254814/webservice-server:latest
          imagePullPolicy: "Always"
          command: ["bash"]
          args:
            [
              "-c",
              "/app/setup.sh; python /app/manage.py migrate; daphne config.asgi:application -b 0.0.0.0 -p 8080",
            ]
          envFrom:
            - secretRef:
                name: secrets-config
          volumeMounts:
            - name: docker-volume
              mountPath: /var/run/docker.sock
            - name: ceph
              mountPath: /volume
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-proxy-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: html
              mountPath: /var/www
        - name: vue
          image: gcr.io/poised-cortex-254814/webservice-client:latest
          imagePullPolicy: "Always"
          command: ["sh"]
          args:
            [
              "-c",
              "cp -r /app/dist /var/www/dist; while true; do sleep 10; done",
            ]
          volumeMounts:
            - name: html
              mountPath: /var/www
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: server-cron
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: cron-call
              image: buildpack-deps:curl
              args:
                - /bin/sh
                - -ec
                - curl -L -X POST server-service/cron/ & for i in $(seq 1 29); do sleep 2; curl -L -X POST server-service/cron/ & done
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
  labels:
    app: server
spec:
  ports:
    - port: 80
      protocol: TCP
  selector:
    app: server
  type: NodePort
---
apiVersion: networking.gke.io/v1beta1
kind: ManagedCertificate
metadata:
  name: server-certificate
spec:
  domains:
    - bio-no.de
---
apiVersion: "extensions/v1beta1"
kind: "Ingress"
metadata:
  name: "server-ingress"
  annotations:
    kubernetes.io/ingress.global-static-ip-name: server-address
    networking.gke.io/managed-certificates: server-certificate
spec:
  backend:
    serviceName: "server-service"
    servicePort: 80
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gce-slow
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gce-fast
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
