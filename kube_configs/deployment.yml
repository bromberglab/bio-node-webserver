apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-nginx-conf
data:
  nginx.conf: |-
    user  nginx;
    worker_processes  1;

    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        sendfile        on;
        keepalive_timeout  600;

        upstream django {
            server 127.0.0.1:8080;
        }

        index  index.html index.htm;

        server {
            listen 80;

            client_max_body_size 50M;

            if ($http_x_forwarded_proto = http) {
                return 301 https://$host$request_uri;
            }

            rewrite ^/(webhooks)(.*)$ /api/$1$2 last;

            location /docs {
                alias   /volume/dist/docs;
            }
            location /static/downloads {
                disable_symlinks off;
                alias   /var/www/static/downloads;
                sendfile           on;
                sendfile_max_chunk 1m;
            }
            location /static {
                alias   /var/www/static;
            }
            location /api/ {
                proxy_set_header       X-Forwarded-Proto $http_x_forwarded_proto;
                proxy_set_header       Host $host;
                proxy_set_header       X-Real-IP $http_x_forwarded_for;
                proxy_set_header       Accept-Encoding identity;

                proxy_pass         http://django;
                proxy_redirect     off;
            }
            location / {
                alias   /volume/dist/client/;
            }
        }
    }
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: backend-config
spec:
  timeoutSec: 86400
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
  labels:
    app: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      volumes:
        - name: html
          emptyDir: {}
        - name: docker-volume
          hostPath:
            # directory location on host
            path: /var/run/docker.sock
        - name: nginx-proxy-config
          configMap:
            name: proxy-nginx-conf
        - name: nfs
          persistentVolumeClaim:
            claimName: default-pvc
            readOnly: false
        - name: sa-key
          secret:
            secretName: sa-key
      terminationGracePeriodSeconds: 5
      priorityClassName: highest-priority
      containers:
        - name: django
          image: gcr.io/poised-cortex-254814/webservice-server:latest
          imagePullPolicy: "Always"
          envFrom:
            - secretRef:
                name: secrets-config
          volumeMounts:
            - name: docker-volume
              mountPath: /var/run/docker.sock
            - name: nfs
              mountPath: /volume
            - name: html
              mountPath: /var/www
            - name: sa-key
              mountPath: "/keys"
              readOnly: true
        - name: nginx
          image: yspreen/nginx
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-proxy-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: html
              mountPath: /var/www
            - name: nfs
              mountPath: /volume
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: server-cron
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: cron-call
              image: buildpack-deps:curl
              resources:
                requests:
                  memory: "1Mi"
                  cpu: "1m"
              args:
                - /bin/sh
                - -ec
                - curl -L -X POST server-service/api/cron/ & for i in $(seq 1 11); do sleep 5; curl -L -X POST server-service/api/cron/ & done
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
  labels:
    app: server
  annotations:
    beta.cloud.google.com/backend-config: '{"ports": {"443" :"backend-config","80" :"backend-config"}}'
spec:
  ports:
    - port: 80
      protocol: TCP
  selector:
    app: server
  type: NodePort
